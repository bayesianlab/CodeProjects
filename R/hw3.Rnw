\documentclass{article}
\title{Homework 3}
\author{Dillon Flannery	}
\begin{document}
\maketitle
\SweaveOpts{concordance=TRUE}

\section*{Q1 a)}
Generate 200 observations from the mixture distribution, 
<<>>=
library(ggplot2)
library(coda)
set.seed(6)
par(mfrow=c(1,1))

mixtured <- function(delta,mu1,sigma1, mu2,sigma2, N){
  delta*rnorm(N, mu1, sigma1) + (1-delta)*rnorm(N,mu2,sigma2)
}

loglike <- function(delta, mu1, mu2, sigma1, sigma2, x){
  if( (0 < delta) && (delta <= 1)){
    lambda <- delta*mu1 + (1-delta)*mu2
    gamma <- sqrt((delta^2)*sigma1^2 + ((1-delta)^2)*sigma2^2)
    C <- -length(x)*log(sqrt(2*pi*gamma^2))
    Mah <- (t(x-lambda)%*%(x-lambda))/(2*gamma^2)
    L <- C - Mah 
    L    
  }else{
    L <- -Inf
    L
  }
}

mu1 <- 7
mu2 <- 10
sigma1 <- sigma2 <- .5
M <- mixtured(.7, 7, .5, 10, .5, 200)
mdf <- as.data.frame(M, colnames="Mix")
@
<<count, fig=TRUE>>=
ggplot(data=mdf, aes(x=M, colour='b')) + geom_histogram(aes(y=..count..))+ theme(legend.position="none") +
  xlab('200 Obs. From Mixture Distribution')+ylab('Frequency')
@
\section*{Q1 b)}
Implement an independence chain Metropolis-Hastings procedure to draw from posterior of $\delta$:
<<>>=
# Q1 b ====
Runs <- 10000
burn <- floor(.1*Runs)
chains <- 3
mhsample <- matrix(0, nrow=Runs, ncol=chains)
mhsample[1] <- runif(1, 0, 1)
for(c in 1:chains){
  delta <- runif(1)
  for(i in 2:Runs){
    loglike_t <- loglike(delta, mu1, mu2, sigma1, sigma2, M)
    prop_tp1 <- runif(1)
    loglike_tp1 <- loglike(prop_tp1, mu1, mu2, sigma1, sigma2, M)
    num <-  loglike_tp1 + log(dunif(mhsample[i-1]))
    den <- loglike_t + log(dunif(prop_tp1))
    a <- min(0, num-den)
    u <- log(runif(1))
    if(u < a){
      mhsample[i, c] <- prop_tp1
      delta <- prop_tp1
    }else{
      mhsample[i, c] <- mhsample[i-1, c]
    }
  }
}
mhsample <- as.data.frame(mhsample[burn:Runs,])
mcobj <- as.mcmc.list(as.mcmc(mhsample))
@
<<diag, fig=TRUE>>=
plot(mcobj)
summary(mcobj)
@
\section*{Q1 c)}
Implement a Random Walk MH procedure to draw from posterior:
<<>>=
# Q1 c====
Runs <- 10000
burn <- floor(.1*Runs)
chains <- 3
mhsample <- matrix(0, nrow=Runs, ncol=chains)
mhsample[1] <- runif(1, 0, 1)
for(c in 1:chains){
  delta <- runif(1)
  for(i in 2:Runs){
    logfprevious <- loglike(delta, mu1, mu2, sigma1, sigma2, M)
    badproposal <- 1
    while(badproposal == 1){
      proposal <- delta + runif(1,-1,1)
      if( (proposal < 0) || (proposal > 1) ){
        badproposal <- 1
      }
      else{
        badproposal <- 0
      }
    }
    logfproposal <- loglike(proposal, mu1, mu2, sigma1, sigma2, M)
    num <-  logfproposal + dunif(delta, log=TRUE)
    den <- logfprevious + dunif(proposal, log=TRUE)
    a <- min(0, num-den)
    u <- log(runif(1))
    if(u < a){
      mhsample[i, c] <- proposal  
      delta <- proposal
    }else{
      mhsample[i, c] <- delta
    }
  }
}
mhsample <- mhsample[burn:Runs,]
mcobj <- as.mcmc(mhsample)
@
<<diag, fig=TRUE>>=
plot(mcobj)
summary(mcobj)
@
\section*{Q1 d)}
Use a logit proposal for the MH algorithm:
<<>>=
Runs <- 10000
burn <- floor(.1*Runs)
chains <- 3
mhsample <- matrix(0, nrow=Runs, ncol=chains)
mhsample[1] <- runif(1, 0, 1)
for(c in 1:chains){
  delta <- runif(1)
  for(i in 2:Runs){
    logfprevious <- loglike(delta, mu1, mu2, sigma1, sigma2, M)
    badproposal <- 1
    while(badproposal == 1){
      U <- log(delta/(1-delta))
      Ustar <- U + runif(1,-1,1)
      proposal <- exp(Ustar)/(1+exp(Ustar))
      if( (proposal < 0) || (proposal > 1) ){
        badproposal <- 1
      }
      else{
        badproposal <- 0
      }
    }
    logfproposal <- loglike(proposal, mu1, mu2, sigma1, sigma2, M)
    num <-  logfproposal + dunif(delta, log=TRUE)
    den <- logfprevious + dunif(proposal,log=TRUE)
    a <- min(0, num-den)
    u <- log(runif(1))
    if(u < a){
      mhsample[i, c] <- proposal 
      delta <- proposal
    }else{
      mhsample[i, c] <- delta
    }
  }
}
mhsample <- mhsample[burn:Runs,]
mcobj <- as.mcmc(mhsample)
@

<<diag, fig=TRUE>>=
plot(mcobj)
summary(mcobj)
@
\section*{Q1 d)}
Compare all of the results: \\
Part b) produced results that were  reasonable and conformed to the true model. The densities are centered around the truth, 0.7 with a small standard deviation. The highest posterior densities are tight, all containing the true value of $\delta$. The most extreme quantiles of the posterior are close to the true value, the 2.5\% HPD is .69, .69, .69 for chains 1, 2, 3. \\
Part c) produced some bias. The histograms show a bimodal density after 10,000 simulations with a burnin of 10\%. The HPD's still contain the truth and are also very tight around the true values. The 95\% HPD's are [0.69, 0.72] with some of the chains going as high as 0.73. These are still good results and show that the RWMH is still converging to the true value. The trace plots show that the acceptance probability is not good, a lot of the draws are being rejected and the chain is not mixing well. This is due to the large variance of the proposal, a uniform from -1 to 1. A large portion of the time unsuitable values will be proposed and the chain will not proceed to the next proposal. Part b) was better at producing acceptable proposals since its support overlapped with that of $\delta$.
Part d) produced many accepted draws, which can be seen from the trace plots of the chains. Of the three it produced the most accepted draws consistently in the three chains analyzed. The density is also centered on the true value and the HPD's all contain the true value of $\delta$. \\
As for which one is best, b) and d) are superior to c). d) has a higher acceptance probability than b) and similar means and HPD's. Therefore, it seems that the best proposal is the logit. 
\newpage

\section*{Q2 a)}
In this problem we start from three different values 0,7 , 15. The issue raised in this question is that the variance of the proposal is very small. Values will tend to be centered around the last accepted draw. Starting from values very far away from the mixture mean of 7.9 will mean that the MH chain will take a long time to arrive at the stationary distribution. The following code and plots illustrate this point:
<<>>=
# Q2 a====  
Runs <- 10000
burn <- floor(.1*Runs)
chains <- 3
mhsample <- matrix(0, nrow=Runs, ncol=chains)
mhsample[1] <- runif(1, 0, 1)
init <- c(0,7,15)
Mu <- .7*mu1 + .3*mu2
Sig <- sqrt((.7^2)*sigma1^2 + (.3^2)*sigma2^2)
propSd <- sqrt(.01)
for(c in 1:chains){
  previous <- init[c]
  mhsample[1,c] <- init[c]
  cat("Iteration ", c)
  for(i in 2:Runs){
    logfprevious <- dnorm(previous, Mu, Sig, log=TRUE)
    proposal <- rnorm(1,previous, propSd)
    logfproposal <- dnorm(proposal, Mu,Sig, log=TRUE)
    num <-  logfproposal + dnorm(previous, proposal, propSd, log=TRUE)
    den <- logfprevious + dnorm(proposal, previous, propSd, log=TRUE)
    a <- min(0, num-den)
    u <- log(runif(1))
    if(u < a){
      mhsample[i, c] <- proposal  
      previous <- proposal
    }else{
      mhsample[i, c] <- previous
    }
  }
}
mcobj <- as.mcmc(mhsample)
@

<<diag,fig=TRUE>>=
plot(mcobj)
summary(mcobj)
@
The distributions all look different based on the starting value. This is clearly not a good feature of this proposal. If only one sample were available the analysis could be biased. The means are slightly different for the two chains with lower start values. The higher start value chain has a higher mean and a higher upper limit on its HPD. The lower start value chain has a lower lower limit of its HPD. 

\section*{Q2 b)}
The way to fix this problem is to allow the chain to move more freely. I will change to variance of the proposal and the chain will move more quickly in the direction of the true distribution. With a suitable burnin the inference should be correct. 
<<>>=
#Q2 b====
Runs <- 1000
burn <- floor(.1*Runs)
chains <- 3
mhsample <- matrix(0, nrow=Runs, ncol=chains)
mhsample[1] <- runif(1, 0, 1)
init <- c(0,7,15)
Mu <- .7*mu1 + .3*mu2
Sig <- sqrt((.7^2)*sigma1^2 + (.3^2)*sigma2^2)
propSd <- 1
for(c in 1:chains){
  previous <- init[c]
  cat("Iteration ", c)
  for(i in 2:Runs){
    logfprevious <- dnorm(previous, Mu, Sig, log=TRUE)
    proposal <- rnorm(1,previous, propSd)
    logfproposal <- dnorm(proposal, Mu,Sig, log=TRUE)
    num <-  logfproposal + dnorm(previous, proposal, propSd, log=TRUE)
    den <- logfprevious + dnorm(proposal, previous, propSd, log=TRUE)
    a <- min(0, num-den)
    u <- log(runif(1))
    if(u < a){
      mhsample[i, c] <- proposal  
      previous <- proposal
    }else{
      mhsample[i, c] <- previous
    }
  }
}
mhsample <- mhsample[burn:Runs,]
mcobj <- as.mcmc(mhsample)
@
<<diag2, fig=TRUE>>=
plot(mcobj)
summary(mcobj)
@


\end{document}