%% Import data from text file.
% Script for importing data from the following text file:
%
%    /home/precision/GoogleDrive/Datasets/US unemployment/states_busapp.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2019/05/07 18:48:46

%% Initialize variables.
filename = '/home/precision/GoogleDrive/Datasets/US unemployment/states_busapp.csv';
delimiter = ',';
startRow = 2;

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^[-/+]*\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end

% Convert the contents of columns with dates to MATLAB datetimes using the
% specified date format.
try
    dates{1} = datetime(dataArray{1}, 'Format', 'yyyy-MM-dd', 'InputFormat', 'yyyy-MM-dd');
catch
    try
        % Handle dates surrounded by quotes
        dataArray{1} = cellfun(@(x) x(2:end-1), dataArray{1}, 'UniformOutput', false);
        dates{1} = datetime(dataArray{1}, 'Format', 'yyyy-MM-dd', 'InputFormat', 'yyyy-MM-dd');
    catch
        dates{1} = repmat(datetime([NaN NaN NaN]), size(dataArray{1}));
    end
end

dates = dates(:,1);

%% Split data into numeric and string columns.
rawNumericColumns = raw(:, [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51]);

%% Create output variable
statesbusapp = table;
statesbusapp.Date = dates{:, 1};
statesbusapp.BUSAPPSAAK = cell2mat(rawNumericColumns(:, 1));
statesbusapp.BUSAPPSAAL = cell2mat(rawNumericColumns(:, 2));
statesbusapp.BUSAPPSAAR = cell2mat(rawNumericColumns(:, 3));
statesbusapp.BUSAPPSAAZ = cell2mat(rawNumericColumns(:, 4));
statesbusapp.BUSAPPSACA = cell2mat(rawNumericColumns(:, 5));
statesbusapp.BUSAPPSACO = cell2mat(rawNumericColumns(:, 6));
statesbusapp.BUSAPPSACT = cell2mat(rawNumericColumns(:, 7));
statesbusapp.BUSAPPSADE = cell2mat(rawNumericColumns(:, 8));
statesbusapp.BUSAPPSAFL = cell2mat(rawNumericColumns(:, 9));
statesbusapp.BUSAPPSAGA = cell2mat(rawNumericColumns(:, 10));
statesbusapp.BUSAPPSAHI = cell2mat(rawNumericColumns(:, 11));
statesbusapp.BUSAPPSAIA = cell2mat(rawNumericColumns(:, 12));
statesbusapp.BUSAPPSAID = cell2mat(rawNumericColumns(:, 13));
statesbusapp.BUSAPPSAIL = cell2mat(rawNumericColumns(:, 14));
statesbusapp.BUSAPPSAIN = cell2mat(rawNumericColumns(:, 15));
statesbusapp.BUSAPPSAKS = cell2mat(rawNumericColumns(:, 16));
statesbusapp.BUSAPPSAKY = cell2mat(rawNumericColumns(:, 17));
statesbusapp.BUSAPPSALA = cell2mat(rawNumericColumns(:, 18));
statesbusapp.BUSAPPSAMA = cell2mat(rawNumericColumns(:, 19));
statesbusapp.BUSAPPSAMD = cell2mat(rawNumericColumns(:, 20));
statesbusapp.BUSAPPSAME = cell2mat(rawNumericColumns(:, 21));
statesbusapp.BUSAPPSAMI = cell2mat(rawNumericColumns(:, 22));
statesbusapp.BUSAPPSAMN = cell2mat(rawNumericColumns(:, 23));
statesbusapp.BUSAPPSAMO = cell2mat(rawNumericColumns(:, 24));
statesbusapp.BUSAPPSAMS = cell2mat(rawNumericColumns(:, 25));
statesbusapp.BUSAPPSAMT = cell2mat(rawNumericColumns(:, 26));
statesbusapp.BUSAPPSANC = cell2mat(rawNumericColumns(:, 27));
statesbusapp.BUSAPPSAND = cell2mat(rawNumericColumns(:, 28));
statesbusapp.BUSAPPSANE = cell2mat(rawNumericColumns(:, 29));
statesbusapp.BUSAPPSANH = cell2mat(rawNumericColumns(:, 30));
statesbusapp.BUSAPPSANJ = cell2mat(rawNumericColumns(:, 31));
statesbusapp.BUSAPPSANM = cell2mat(rawNumericColumns(:, 32));
statesbusapp.BUSAPPSANV = cell2mat(rawNumericColumns(:, 33));
statesbusapp.BUSAPPSANY = cell2mat(rawNumericColumns(:, 34));
statesbusapp.BUSAPPSAOH = cell2mat(rawNumericColumns(:, 35));
statesbusapp.BUSAPPSAOK = cell2mat(rawNumericColumns(:, 36));
statesbusapp.BUSAPPSAOR = cell2mat(rawNumericColumns(:, 37));
statesbusapp.BUSAPPSAPA = cell2mat(rawNumericColumns(:, 38));
statesbusapp.BUSAPPSARI = cell2mat(rawNumericColumns(:, 39));
statesbusapp.BUSAPPSASC = cell2mat(rawNumericColumns(:, 40));
statesbusapp.BUSAPPSASD = cell2mat(rawNumericColumns(:, 41));
statesbusapp.BUSAPPSATN = cell2mat(rawNumericColumns(:, 42));
statesbusapp.BUSAPPSATX = cell2mat(rawNumericColumns(:, 43));
statesbusapp.BUSAPPSAUT = cell2mat(rawNumericColumns(:, 44));
statesbusapp.BUSAPPSAVA = cell2mat(rawNumericColumns(:, 45));
statesbusapp.BUSAPPSAVT = cell2mat(rawNumericColumns(:, 46));
statesbusapp.BUSAPPSAWA = cell2mat(rawNumericColumns(:, 47));
statesbusapp.BUSAPPSAWI = cell2mat(rawNumericColumns(:, 48));
statesbusapp.BUSAPPSAWV = cell2mat(rawNumericColumns(:, 49));
statesbusapp.BUSAPPSAWY = cell2mat(rawNumericColumns(:, 50));

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% statesbusapp.Date=datenum(statesbusapp.Date);

%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp dates blankDates anyBlankDates invalidDates anyInvalidDates rawNumericColumns;