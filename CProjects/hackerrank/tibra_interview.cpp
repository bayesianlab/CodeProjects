

#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);

/*
 * Complete the 'valuation' function below.
 *
 * The function is expected to return a LONG_INTEGER.
 * The function accepts following parameters:
 *  1. LONG_INTEGER reqArea
 *  2. LONG_INTEGER_ARRAY area
 *  3. LONG_INTEGER_ARRAY price
 */

template <typename T>
void printvec(const vector<T> &x)
{
    for (int i = 0; i < x.size(); ++i)
    {
        cout << x[i] << " ";
    }
    cout << endl;
}

long ev(vector<long> x)
{
    return accumulate(x.begin(), x.end(), 0.0) / x.size();
}

long stdev(vector<long> x)
{
    if (x.size() == 1)
    {
        return 0;
    }
    long xbar = ev(x);
    long demeaned = 0;
    vector<long>::iterator it;
    for (it = x.begin(); it != x.end(); ++it)
    {
        long d = (*it) - xbar;
        demeaned += d * d;
    }
    return sqrt(demeaned / (x.size() - 1));
}

vector<bool> areOutliers(vector<long> prices)
{
    vector<bool> out(prices.size());
    fill(out.begin(), out.end(), 0);
    if (prices.size() == 1)
    {
        return out;
    }
    if (prices.size() == 2)
    {
        fill(out.begin(), out.end(), 1);
        return out;
    }
    for (int i = 0; i < prices.size(); ++i)
    {
        long pi = prices[i];
        vector<long> pnoti;
        for (int j = 0; j < prices.size(); ++j)
        {
            if (i != j)
            {
                pnoti.push_back(prices[j]);
            }
        }
        if (abs(pi - ev(pnoti)) > 3 * stdev(pnoti))
        {
            out[i] = 1;
        }
    }
    return out;
}

map<long, vector<long>> findNearest(long reqArea, vector<long> area, vector<long> price)
{
    multimap<long, long> mmap;
    for (int i = 0; i < area.size(); ++i)
    {
        mmap.insert(make_pair(area[i], price[i]));
    }

    // mmap.insert(make_pair(reqArea, -1));
    set<long> keys;
    for (const auto &i : mmap)
    {
        keys.insert(i.first);
    }
    int maxkey, minkey;
    map<long, vector<long>> compList;
    if (!keys.empty())
    {
        maxkey = *keys.rbegin();
        minkey = *keys.begin();
    }
    else
    {
        return compList;
    }
    set<long>::reverse_iterator r = find_if(keys.rbegin(), keys.rend(), [reqArea](long x)
                                            { return reqArea >= x; });

    int largerflag = 0;
    if (reqArea > maxkey)
    {
        largerflag = 1;
    }

    while (r != keys.rend())
    {
        auto fl = mmap.equal_range(*r);
        auto b = fl.first;
        auto e = fl.second;
        vector<long> p;
        while (b != e)
        {
            p.push_back(b->second);
            ++b;
        }
        b = fl.first;
        vector<bool> outliers = areOutliers(p);
        int c = 0;
        while (b != e)
        {
            if (outliers[c] == 0)
            {
                compList[b->first].push_back(b->second);
            }
            ++c;
            ++b;
        }
        if ((compList.size() >= 2) && (largerflag == 0))
        {
            break;
        }
        ++r;
    }
    if (compList.find(reqArea) != compList.end())
    {
        return compList;
    }
    int clsize = compList.size();
    set<long>::iterator f = find_if(keys.begin(), keys.end(), [reqArea](long x)
                                    { return reqArea < x; });

    while (f != keys.end())
    {
        auto fl = mmap.equal_range(*f);
        auto b = fl.first;
        auto e = fl.second;
        vector<long> p;
        while (b != e)
        {
            p.push_back(b->second);
            ++b;
        }
        b = fl.first;
        vector<bool> outliers = areOutliers(p);
        int c = 0;
        while (b != e)
        {
            if (outliers[c] == 0)
            {
                compList[b->first].push_back(b->second);
            }
            ++c;
            ++b;
        }
        int nsize = compList.size();
        if ((clsize < nsize) && (largerflag == 0))
        {
            break;
        }
        ++f;
    }
    // for (const auto &i : compList)
    // {
    //     cout << i.first << " ";
    //     printvec(i.second);
    // }
    return compList;
}

// map<int, vector<long>> makeCompList(vector<long> area, vector<long> price)
// {
//     map<int, vector<long>> cl;
//     if (area.size() == 1)
//     {
//         cl[0];
//     }
//     for (int i = 0; i < area.size(); ++i)
//     {
//         for (int j = 0; j < area.size(); ++j)
//         {
//             if ((i != j) && (area[i] == area[j]))
//             {
//                 cl[i].push_back(price[j]);
//             }
//             else if (i != j)
//             {
//                 cl[i];
//             }
//         }
//     }
//     return cl;
// }

// map<long, vector<long>> removeOutliers(vector<long> area, vector<long> price)
// {
//     map<int, vector<long>> cl = makeCompList(area, price);
//     // for (const auto &i : cl)
//     // {
//     //     cout << i.first << " ";
//     //     printvec(i.second);
//     // }

//     map<int, vector<long>>::iterator mapiter;
//     vector<int> erase;
//     for (mapiter = cl.begin(); mapiter != cl.end(); ++mapiter)
//     {
//         vector<long> home_values = mapiter->second;
//         if (home_values.size() >= 1)
//         {
//             int index = mapiter->first;
//             long val = abs(price[index] - ev(home_values));
//             if (val > 3 * stdev(home_values))
//             {
//                 erase.push_back(index);
//             }
//         }
//     }
//     vector<int>::iterator it;
//     for (it = erase.begin(); it != erase.end(); ++it)
//     {
//         cl.erase(*it);
//     }
//     vector<long> reducedArea;
//     vector<long> reducedPrice;
//     for (mapiter = cl.begin(); mapiter != cl.end(); ++mapiter)
//     {
//         reducedArea.push_back(area[mapiter->first]);
//         reducedPrice.push_back(price[mapiter->first]);
//     }
//     map<long, vector<long>> compList;
//     for (int i = 0; i < reducedArea.size(); ++i)
//     {
//         compList[reducedArea[i]].push_back(reducedPrice[i]);
//     }
//     return compList;
// }

long interpolate(double xstar, double x0, double y0, double x1, double y1)
{
    return (long)(y0 + (xstar - x0) * (y1 - y0) / (x1 - x0));
}

long truncateValue(long input)
{
    if (input >= 1e6)
    {
        return 1e6;
    }
    else if (input <= 1e3)
    {
        return 1e3;
    }
    else
    {
        return input;
    }
}

long valuation(long reqArea, vector<long> area, vector<long> price)
{
    map<long, vector<long>> compList = findNearest(reqArea, area, price);

    if (compList.empty())
    {
        return truncateValue(1000 * reqArea);
    }
    if (compList.find(reqArea) != compList.end())
    {
        if (compList[reqArea].size() == 1)
        {
            return truncateValue(compList[reqArea][0]);
        }
        long sqft_price = ev(compList[reqArea]) / reqArea;
        return truncateValue(reqArea * sqft_price);
    }
    if (compList.size() == 1)
    {
        long avg_price = ev(compList[compList.begin()->first]);
        long sqft_price = avg_price / compList.begin()->first;
        return truncateValue(reqArea * sqft_price);
    }
    else
    {
        if (compList.begin()->first > reqArea)
        {
            long area_a = compList.begin()->first;
            long area_b = next(compList.begin())->first;
            long a = ev(compList[area_a]);
            long b = ev(compList[area_b]);
            return truncateValue(interpolate(reqArea, area_a, a, area_b, b));
        }
        else if (compList.rbegin()->first < reqArea)
        {
            long area_a = compList.rbegin()->first;
            long area_b = next(compList.rbegin())->first;
            long a = ev(compList[area_a]);
            long b = ev(compList[area_b]);
            return truncateValue(interpolate(reqArea, area_a, a, area_b, b));
        }
        else
        {
            map<long, vector<long>>::iterator mapit = compList.begin();
            long area_a = mapit->first;
            for (mapit = next(compList.begin()); mapit != compList.end(); ++mapit)
            {
                if (reqArea > area_a && reqArea < mapit->first)
                {
                    long a = ev(compList[area_a]);
                    long b = ev(compList[mapit->first]);
                    return truncateValue(interpolate(reqArea, area_a, a, mapit->first, b));
                }
                area_a = mapit->first;
            }
            return -1;
        }
    }
    return -1;
}

int main()
{

    vector<long> areas = {1200, 1300, 1200, 1300, 1200, 1500, 1500, 1500, 2000};
    vector<long> prices = {12000, 24000, 500000, 22000, 13000, 30000, 35000, 40000, 45000};
    // cout << valuation(1500, areas, prices) << endl;

    vector<long> areas2 = {1500, 500, 1000, 2000, 2500};
    vector<long> prices2 = {30000, 10000, 20000, 40000, 50000};
    // valuation(1200, areas2, prices2);

    vector<long> areas3 = {1500, 500, 1000, 2000, 2500};
    vector<long> prices3 = {30000, 10000, 20000, 40000, 50000};
    // cout << valuation(500, areas3, prices3) << endl;

    vector<long> areas4 = {1200, 1200, 1200, 2000};
    vector<long> prices4 = {15000, 11000, 17000, 25000};
    cout << valuation(2500, areas4, prices4) << endl;

    vector<long> areas5 = {500};
    vector<long> prices5 = {6200};
    // cout << valuation(600, areas5, prices5) << endl;

    vector<long> areas6 = {95849, 95849, 20995, 20995, 20995, 20995, 20995, 95849, 95849, 15857};
    vector<long> prices6 = {922271, 860302, 222528, 560356, 68326, 493430, 508605, 565375, 849039, 17996};
    // cout << valuation(15857, areas6, prices6) << endl;

    // vector<long> areas7 = {52822, 14006, 16681, 44729, 92261, 57772, 95620, 30063, 64366, 83903, 62778, 66500, 89452, 53714, 27257, 50089, 62599, 26008, 94202, 92765, 32041, 4861, 99420, 38173, 4861, 26784, 7300, 36232, 38814, 44167, 86966, 51196, 19967, 22506, 51940, 85204, 92415, 29383, 54354, 35907, 70994, 3290, 32125, 74871, 94818, 75696, 85066, 97406, 17564, 77021, 86425, 90610, 12811, 65886, 69640, 45145, 25667, 23900, 2525, 40008, 67822, 50004, 21145, 62032, 6688, 15171, 85803, 28942, 42826, 38651, 36480, 13797, 14842, 40632, 40866, 12124, 20136, 71499, 48010, 50894, 20435, 66908, 44174, 63320, 55368, 16978, 20994, 26215, 93898, 42632, 41451, 2445, 77800, 21478, 45605, 74643, 10721, 33635, 28829, 66622, 55075, 31193, 80157, 55254, 99866, 68621, 82159, 74643, 81996, 42918, 98207, 51939, 98016, 28637, 77664, 25411, 29405, 662, 6039, 32150, 62734, 82776, 70646, 5158, 64773, 9511, 30550, 74571, 48144, 48158, 73747, 6274, 94114, 45175, 78952, 94599, 75499, 52381, 81214, 44936, 51350, 71349, 27315, 97021, 56742, 87502, 28267, 38176, 83936, 35962, 49958, 8560, 36207, 27492, 97217, 15190, 30539, 69036, 43144, 4474, 54475, 6863, 14270, 65912, 27257, 36207, 80778, 71417, 71417, 37373, 82775, 32041, 99420, 9267, 84853, 81356, 63320, 39087, 97810, 33773, 31328, 19182, 71258, 61810, 39432, 40446, 91173, 32121, 33404, 82626, 2586, 21267, 68905, 68535, 86439, 21111, 7653, 42245, 94599, 72101, 90610, 75606, 75544, 94547, 16164, 54952, 94818, 8674, 95845, 35745, 43829, 56742, 29799, 75397, 57772, 77664, 13976, 87502, 69311, 96572, 19090, 29213, 59394, 15995, 662, 15492, 57704, 8870, 18807, 40193, 52695, 62823, 67620, 22576, 53872, 35973, 6551, 65614, 77251, 97021, 37986, 26384, 89953, 77904, 31328, 17358, 48248, 41591, 81027, 15956, 54061, 65087, 68250, 40992, 3102, 82799, 94912, 10561, 56423, 41348, 82626, 97406, 4222, 22545, 81644, 62823, 66821, 60271, 70013, 69639, 4222, 94656, 83506, 68603, 33597, 54354, 22787, 58170, 85503, 89160, 27103, 96018, 21890, 46466, 85897, 95845, 5981, 12119, 38094, 46576, 55777, 78687, 86566, 5013, 15821, 73747, 64366, 91973, 55246, 15524, 77163, 6689, 58545, 21211, 84789, 60215, 48158, 12492, 60300, 77761, 52822, 45568, 82845, 18312, 86425, 45175, 37500, 50698, 3291, 73523, 84270, 82106, 80778, 97146, 97850, 26384, 66500, 15073, 58056, 27315, 69346, 38932, 83185, 37912, 89200, 30668, 33597, 3094, 29424, 3329, 79618, 37603, 89452, 37912, 24070, 32125, 9706, 4592, 89953, 72334, 25402, 54820, 91687, 82159, 91726, 63599, 40168, 61751, 71531, 83312, 34047, 20994, 563, 61647, 19454, 15171, 36847, 32059, 35672, 29405, 45091, 31106, 11816, 61647, 98132, 82775, 71258, 35524, 97121, 47416, 17524, 68535, 72888, 95833, 71864, 73584, 61289, 17625, 85897, 69274, 15995, 56560, 27492, 86966, 78916, 87051, 66734, 75606, 61289, 87261, 31337, 38651, 36480, 94305, 14144, 25651, 56336, 55254, 56336, 39637, 49943, 59490, 32706, 53144, 15190, 76675, 43978, 40586, 78246, 61810, 84789, 69690, 91726, 40992, 55494, 98485, 76311, 47841, 62682, 13006, 86344, 66614, 19468, 68802, 9758, 7616, 53872, 36320, 5367, 35973, 39242, 93590, 34137, 6528, 6274, 57711, 60215, 13070, 39415, 9174, 85473, 40376, 55150, 47490, 10337, 44242, 53144, 92415, 15798, 18536, 42114, 39518, 66622, 89427, 6528, 56645, 58444, 17780, 88298, 17846, 97642, 83482, 77327, 97360, 11754, 66053, 89200, 66071, 27343, 18923, 67822, 98207, 26008, 28632, 50004, 32706, 93898, 49191, 75257, 4635, 59490, 75930, 7215, 73523, 87893, 67620, 86650, 73044, 99894, 18799, 48248, 19454, 77887, 41687, 88580, 21109, 95068, 38062, 99169, 36162, 85473, 57371, 26224, 10113, 21109, 37092, 33900, 62784, 3132, 5158, 6688, 57104, 37401, 18536, 37986, 77251, 34791, 35465, 46576, 69346, 2712, 92706, 6863, 9025, 54475, 39610, 20550, 47490, 91786, 39087, 36477, 95833, 68735, 78976, 41214, 62580, 73847, 18312, 31106, 81692, 31020, 15524, 69639, 41687, 43913, 50600, 70215, 54952, 43913, 19998, 14637, 3736, 74871, 91453, 68905, 71349, 66071, 75257, 2525, 49048, 94600, 77472, 93997, 94656, 5687, 21071, 96402, 43978, 73158, 99866, 58170, 47003, 26784, 16168, 13326, 77800, 40344, 5723, 70994, 87566, 37401, 32814, 25570, 95400, 52473, 61461, 20322, 2977, 54542, 84213, 32814, 40168, 77301, 18895, 86344, 96229, 89352, 89427, 17846, 38062, 40344, 63992, 68603, 20873, 73584, 37977, 77327, 44524, 50089, 48004, 27887, 20146, 74571, 46632, 65940, 15956, 17647, 82042, 76080, 7329, 78687, 38566, 46117, 4682, 66126, 99894, 85204, 45118, 29213, 3094, 19090, 49174, 3736, 21890, 53020, 2586, 28637, 82106, 20643, 41364, 35950, 36170, 40586, 83936, 5242, 24658, 4337, 63369, 61491, 46632, 34522, 55246, 13955, 72101, 56271, 97803, 41591, 65070, 22787, 19120, 5345, 42826, 23770, 90328, 89857, 52695, 69036, 26224, 11067, 57005, 30539, 21145, 14270, 76874, 55442, 24214, 77195, 65921, 23997, 9174, 76675, 39637, 38932, 75139, 54579, 16562, 9025, 86676, 34199, 32150, 35715, 96954, 82799, 11754, 58444, 80157, 97803, 6846, 38566, 97596, 70413, 55494, 77201, 56560, 77203, 32101, 20352, 21478, 58545, 41364, 50477, 69825, 22264, 42114, 13326, 96504, 75544, 61580, 77904, 95605, 63357, 77472, 98243, 57150, 25411, 24070, 70787, 36982, 81692, 50600, 19998, 20643, 25716, 94202, 97850, 55368, 38116, 83353, 50477, 52381, 55777, 62292, 60379, 31174, 46223, 68180, 2248, 92427, 3924, 64773, 83185, 48540, 81174, 73383, 21267, 64290, 11270, 29738, 4635, 20352, 23164, 89857, 32408, 68224, 78246, 25160, 57288, 47841, 77201, 83134, 25533, 17005, 13888, 53714, 50525, 37092, 47003, 10961, 40853, 91822, 19214, 23164, 55075, 36477, 16942, 27343, 35950, 70413, 58870, 50698, 33404, 17625, 15492, 36982, 3291, 98628, 7320, 75731, 1278, 95269, 32059, 18035, 82042, 95620, 61519, 41451, 23997, 28632, 52372, 94600, 44381, 11622, 38403, 68250, 54579, 32101, 77691, 46117, 36125, 17524, 9511, 49191, 50525, 34238, 91822, 96954, 13605, 70787, 52372, 74204, 83423, 40193, 88580, 83903, 90622, 69274, 86650, 33355, 35524, 86288, 68424, 62986, 85066, 86566, 97879, 10626, 18895, 20136, 31193, 13976, 45605, 48301, 2977, 40008, 47937, 15798, 63599, 16554, 93700, 53020, 44513, 38094, 57288, 2248, 22545, 82225, 59394, 75397, 39242, 82845, 34954, 35473, 5345, 19120, 49174, 75315, 25533, 87261, 6039, 2445, 81996, 56235, 97596, 88059, 44167, 25667, 74204, 69885, 18752, 54820, 31020, 45091, 20322, 54542, 61849, 23024, 94912, 2712, 40376, 18923, 66242, 82492, 10738, 36557, 7616, 69825, 83006, 26453, 40423, 21949, 30294, 16168, 68424, 55306, 39415, 7215, 38566, 23770, 13605, 5687, 36847, 56641, 10721, 79210, 75499, 36232, 14144, 88342, 10337, 28942, 68802, 46466, 11622, 96018, 8674, 5242, 97879, 77203, 8659, 8870, 49387, 83006, 42978, 20550, 58870, 66053, 93147, 35715, 41835, 10561, 88566, 56271, 36125, 76107, 34954, 69885, 45568, 39518, 35721, 6118, 3329, 30063, 43144, 15800, 25755, 47937, 62580, 83312, 34047, 35672, 36963, 37711, 67410, 11270, 15821, 75696, 6846, 75731, 78678, 77195, 35465, 27211, 12811, 62599, 71864, 93420, 61491, 91687, 24896, 25888};
    // vector<long> prices7 = {537427, 107491, 139819, 451625, 935162, 595572, 963523, 274328, 656562, 851238, 637485, 674677, 915155, 545718, 250638, 515289, 634788, 242001, 946797, 940298, 290620, 27632, 994689, 382575, 27825, 249586, 52212, 354758, 388798, 445208, 882395, 520293, 178040, 213496, 521896, 861746, 937900, 269662, 549360, 339825, 720728, 15002, 305399, 759299, 959106, 773638, 858375, 978611, 150358, 783414, 874929, 920752, 84678, 663570, 709425, 455965, 235767, 223053, 5607, 403137, 686542, 512145, 203421, 631072, 48231, 114902, 871638, 266006, 439876, 388417, 356474, 104978, 112370, 419670, 421391, 83795, 180153, 729711, 485653, 518952, 191789, 679294, 446025, 647171, 574158, 141061, 198225, 244172, 943272, 439424, 427929, 5062, 803200, 207076, 462566, 758537, 72898, 316244, 264064, 676390, 566338, 285224, 815722, 568778, 996705, 696051, 832849, 754665, 821666, 440044, 991580, 521724, 988028, 263180, 798102, 233461, 270895, 1982, 39652, 307374, 637083, 837547, 719007, 28383, 659657, 66001, 277742, 754467, 485938, 488973, 751519, 41311, 945556, 457626, 813041, 950414, 763254, 527906, 818843, 453802, 520676, 727056, 251760, 976245, 591323, 896215, 261971, 383044, 853041, 342930, 511623, 54337, 351790, 259573, 977828, 115259, 276158, 700194, 440883, 23755, 550605, 51353, 108983, 663883, 250767, 352309, 817351, 728572, 728356, 362139, 837073, 288433, 995366, 64465, 857888, 820287, 645157, 393698, 983213, 316331, 286595, 174115, 723576, 627703, 397963, 417335, 923027, 300579, 313286, 836552, 7305, 206060, 698295, 693536, 875319, 203396, 54129, 439360, 950735, 740182, 921260, 770206, 769872, 950398, 133465, 563962, 958816, 54696, 965766, 339114, 442571, 590246, 273048, 762312, 596147, 797983, 106763, 891829, 702151, 971584, 169167, 267500, 610747, 131467, 2362, 120157, 593902, 59761, 164071, 409595, 530962, 641828, 682764, 214795, 547008, 343123, 44674, 663292, 791417, 974932, 374514, 248768, 917540, 804972, 287603, 143351, 490839, 428705, 817696, 128949, 548074, 661614, 687757, 422843, 13822, 837939, 959938, 70419, 585271, 425183, 835031, 979886, 21370, 214508, 820673, 640813, 678976, 613941, 714536, 709135, 21315, 957420, 849607, 694079, 316142, 548870, 216646, 599553, 870901, 907568, 249907, 968357, 208552, 464677, 872072, 966530, 35556, 83293, 380452, 466209, 580077, 810718, 875982, 28157, 128368, 751004, 656751, 931489, 566873, 123558, 784848, 49189, 604858, 204563, 857448, 613411, 489797, 83936, 615064, 801364, 535199, 458302, 839350, 160383, 875117, 456116, 365617, 518789, 15878, 747884, 856313, 826887, 817029, 977144, 984880, 248124, 674065, 112630, 596284, 253312, 702369, 391998, 841471, 368630, 908643, 279221, 314564, 10426, 271405, 17504, 815222, 365639, 913704, 366719, 225427, 305315, 67163, 25578, 917951, 740339, 231660, 562141, 926334, 832923, 926914, 653551, 405489, 627252, 730954, 842733, 319525, 200963, 1573, 627026, 175647, 113520, 357557, 296097, 336026, 269804, 455380, 281089, 83029, 626723, 988152, 837179, 722242, 335291, 976314, 472628, 148322, 693162, 744099, 964711, 731018, 750678, 620532, 152362, 872647, 701341, 131682, 586865, 259440, 882100, 811488, 883597, 677914, 770016, 620338, 885388, 288428, 387622, 356454, 949390, 107637, 235059, 584238, 570169, 583924, 403087, 511548, 612627, 308091, 541715, 115603, 777916, 445091, 418797, 806659, 627889, 857384, 709471, 926409, 421483, 576541, 992614, 777572, 478966, 635420, 86251, 874206, 676227, 176484, 697287, 68985, 53568, 547702, 354950, 32903, 345865, 396166, 942487, 322172, 44584, 42754, 594069, 613598, 91323, 396231, 63597, 865525, 414339, 566599, 476791, 70199, 449898, 543650, 937625, 126850, 161512, 434577, 398839, 677323, 912423, 44615, 590066, 604113, 152866, 898158, 152921, 981403, 849393, 794873, 978456, 82628, 665763, 910496, 668542, 255852, 166946, 685437, 989048, 242173, 262436, 512606, 307983, 944280, 504753, 760251, 26108, 610950, 776390, 52171, 748626, 896555, 683046, 878299, 744975, 998639, 163857, 490214, 176083, 804164, 430992, 903990, 201911, 960613, 376657, 993576, 350610, 865947, 592810, 244853, 69469, 202828, 361481, 318693, 638107, 15001, 28223, 47277, 592257, 364923, 161268, 373012, 791759, 326794, 332303, 465136, 704360, 8268, 939182, 51275, 60043, 550270, 399428, 193789, 478120, 928839, 392933, 356087, 964806, 696188, 814646, 423655, 632638, 753073, 160770, 282755, 821184, 280241, 125649, 706033, 429881, 443207, 517604, 714664, 565043, 443333, 179190, 110376, 18141, 760034, 923029, 698853, 724177, 669310, 760665, 5404, 497180, 953361, 797771, 945194, 954153, 33491, 201251, 968725, 444616, 746028, 998359, 596691, 470311, 249502, 138522, 93396, 803299, 414253, 34571, 721935, 896552, 365118, 309175, 235045, 962204, 528188, 620595, 182389, 9868, 550709, 856161, 308717, 406955, 793606, 165558, 873707, 968614, 911168, 912369, 157330, 379861, 413795, 654277, 694623, 197809, 749421, 369127, 795093, 451474, 513341, 482953, 260734, 181247, 754515, 468766, 665492, 131089, 152506, 822966, 776715, 52721, 811059, 387414, 462915, 26742, 669451, 999618, 859162, 455514, 269526, 9996, 167400, 497456, 17879, 208984, 538303, 8217, 263032, 829351, 197593, 425677, 342504, 351393, 419058, 851338, 28849, 230520, 23206, 651706, 622125, 469528, 325700, 567275, 106395, 739967, 580187, 982052, 428286, 661165, 215867, 170269, 32709, 439925, 220462, 918877, 917296, 530217, 699759, 246690, 75034, 591506, 277042, 204037, 110230, 783210, 575790, 227086, 785410, 665313, 224509, 64063, 782050, 403128, 390706, 760096, 556492, 139273, 62510, 881356, 323557, 306923, 336631, 974034, 838043, 81389, 602487, 815240, 982778, 50566, 385896, 980893, 716618, 576982, 789141, 588707, 790897, 297389, 189645, 206464, 605632, 425777, 516253, 711229, 209911, 433345, 94034, 969210, 765546, 623994, 806294, 962590, 649761, 796152, 991830, 592599, 233704, 226472, 720059, 360790, 821519, 517630, 178815, 195239, 239494, 946184, 986864, 575779, 381043, 842820, 515658, 527605, 578180, 631156, 616588, 283397, 463208, 687258, 4211, 938538, 20364, 660223, 841304, 496155, 818512, 747804, 205396, 655951, 75174, 272722, 26555, 183043, 220176, 915955, 307687, 687656, 808100, 231175, 592784, 479508, 786237, 841048, 233824, 141113, 105789, 543995, 517304, 361513, 470303, 74548, 419694, 931381, 174346, 219055, 565333, 355522, 140591, 257088, 340186, 718272, 609935, 518710, 312353, 151613, 122536, 360673, 17148, 993215, 52346, 773910, 2564, 961191, 291742, 158245, 824595, 962949, 622299, 425942, 224205, 262123, 525028, 954039, 450403, 77135, 383736, 688284, 559185, 297981, 800600, 462944, 347040, 145747, 65216, 508330, 517376, 325008, 930471, 972623, 99307, 719565, 522441, 753594, 849154, 411049, 906835, 850473, 921377, 701701, 880035, 309967, 335608, 872770, 691053, 644660, 857891, 876191, 987082, 71638, 164511, 180020, 285994, 107208, 461976, 492204, 9002, 404020, 482349, 125855, 653105, 138929, 942888, 540255, 451277, 380329, 592650, 2734, 214267, 833720, 610780, 762493, 393951, 838384, 329757, 335026, 32815, 173814, 504064, 761914, 234944, 888334, 40600, 4614, 822440, 580127, 980982, 898115, 445956, 238958, 754343, 712795, 162410, 562237, 279517, 454976, 181567, 551806, 629445, 218306, 959495, 8313, 414397, 166379, 673346, 834329, 73381, 357516, 52845, 709651, 840620, 249116, 415055, 209652, 276085, 138275, 692018, 570325, 397270, 51826, 387458, 222553, 101849, 33979, 359633, 588913, 72698, 815068, 763791, 354704, 108919, 901534, 69478, 265272, 697108, 464391, 80313, 966625, 55105, 32413, 987156, 790687, 54598, 57573, 508435, 840431, 440526, 192655, 608963, 666518, 941218, 338281, 432001, 70472, 902497, 583217, 346064, 776801, 327122, 713506, 459546, 398466, 338637, 41050, 17862, 275998, 442421, 127268, 240815, 480849, 632516, 841825, 321631, 335780, 359645, 366396, 680184, 77047, 128034, 772556, 50851, 775609, 809128, 785299, 332913, 250247, 84117, 634516, 736988, 941460, 621491, 924537, 231102, 241998};
    // cout << valuation(80574, areas7, prices7) << endl;
}