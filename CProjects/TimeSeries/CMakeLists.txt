# Top level cmake 
cmake_minimum_required(VERSION 2.8 FATAL_ERROR)
project(multilevel)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_BUILD_TYPE DEBUG)
# set(CMAKE_BUILD_TYPE RELEASE)
# set(CMAKE_CXX_FLAGS_REALEASE "-O3 -march=native -mfpmath=sse -funroll-loops -fopenmp -DNDEBUG -ffast-math")
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
# add_compile_options(-Wall -Wextra -pedantic)
find_program(CCACHE_FOUND ccache)
if(CCACHE_FOUND)
  message(STATUS "Found CCACHE")
  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
  set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache) 
  set(CMAKE_CXX_COMPILER_LAUNCHER ccache)
endif(CCACHE_FOUND)

find_package(Eigen3)
if (${EIGEN3_FOUND})
  include_directories(${EIGEN3_INCLUDE_DIR})
else()
  message(STATUS "Eigen3 not found")
endif()
find_package(Boost REQUIRED COMPONENTS filesystem)
if(Boost_FOUND)
  include_directories(${Boost_INCLUDE_DIRS})
  message(STATUS "Found boost headers")
endif(Boost_FOUND)

set(ardatagensrc src/GenerateAutoRegressiveData.cpp)
set(distsrc ${PROJECT_SOURCE_DIR}/../Distributions/src/Distributions.cpp)
set(mlfuncsrc ${PROJECT_SOURCE_DIR}/../MultilevelModel/src/MultilevelModelFunctions.cpp)
set(eigentoolssrc ${PROJECT_SOURCE_DIR}/../EigenTools/src/EigenTools.cpp)
add_library(basetools STATIC ${distsrc})
add_library(datagen STATIC ${ardatagensrc})
add_library(mlfunc STATIC ${mlfuncsrc})
add_library(eigentools STATIC ${eigentoolssrc})

include_directories(${PROJECT_SOURCE_DIR}/../EigenTools/include/ ${PROJECT_SOURCE_DIR}/../Distributions/include ${PROJECT_SOURCE_DIR}/../MultilevelModel/include include)

add_executable(ts src/Test_ArModel.cpp)
target_link_libraries(ts PUBLIC datagen basetools datagen mlfunc eigentools) 
 
